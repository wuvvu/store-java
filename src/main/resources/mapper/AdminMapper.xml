<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.example.store.mapper.AdminMapper">

    <!-- 二级缓存-->
    <!--<cache readOnly="true" />-->

    <resultMap id="ProductResult" type="Product">
        <id property="product_id" column="product_id" />
        <result property="product_name" column="product_name" />
        <result property="category_id" column="category_id" />
        <result property="product_title" column="product_title" />
        <result property="product_intro" column="product_intro" />
        <result property="product_picture" column="product_picture" />
        <result property="product_price" column="product_price" />
        <result property="product_selling_price" column="product_selling_price" />
        <result property="product_num" column="product_num" />
        <result property="product_sales" column="product_sales" />
        <result property="isDeleted" column="isDeleted" />
    </resultMap>

    <select id="getAllProduct" resultMap="ProductResult">
        select * from product
    </select>

    <insert id="addProduct" parameterType="Product" useGeneratedKeys="true" keyProperty="product_id">
        insert ignore into product(product_name, category_id,
                                   product_title, product_intro, product_picture,
                                   product_price, product_selling_price, product_num, product_sales)
                values (#{product_name}, #{category_id}, #{product_title}, #{product_intro},
                        #{product_picture}, #{product_price}, #{product_selling_price}, #{product_num}, #{product_sales})
    </insert>

    <insert id="addProductPicture">
        insert ignore into product_picture(product_id, product_picture) values
        <foreach collection="pictureList" item="picture" index="index" separator=",">
            (#{product_id},
            #{picture})
        </foreach>
    </insert>

    <update id="offShelfById">
        update product set isDeleted = 1 where product_id = #{product_id} limit 1
    </update>

    <update id="updateProduct">
        update product set product_name = #{product_name}, category_id = #{category_id}, product_title = #{product_title},
                           product_intro = #{product_intro}, product_picture = #{product_picture}, product_price = #{product_price},
                           product_selling_price = #{product_selling_price}, product_num = #{product_num}
            where product_id = #{product_id} limit 1
    </update>

    <update id="onShelfById">
        update product set isDeleted = 0 where product_id = #{product_id} limit 1
    </update>

    <delete id="deletePictureByProductId">
        delete from product_picture where product_id = #{product_id}
    </delete>

    <resultMap id="OrderResult" type="Order">
        <id property="id" column="id" />
        <result property="order_id" column="order_id" />
        <result property="user_id" column="user_id" />
        <result property="product_id" column="product_id" />
        <result property="product_num" column="product_num" />
        <result property="product_price" column="product_price" />
        <result property="order_time" column="order_time" />
        <result property="user_name" column="userName" />
    </resultMap>

    <select id="getOrderIdBySearch" resultMap="OrderResult">
        select o.order_id
        from orders o , product p, category c, users u
        where
            o.product_id = p.product_id and
            p.category_id = c.category_id and
            u.user_id = o.user_id
            <if test="search != null and search != ''">
                and(
                o.user_id = #{search} or
                p.product_name like concat('%', #{search}, '%') or
                c.category_name like concat('%', #{search}, '%')
                )
            </if>
        group by o.order_id
        order by o.order_id desc
    </select>

    <select id="getOrderBySearch" resultMap="OrderResult">
        select *
        from orders o , product p, category c, users u
        where
            o.product_id = p.product_id and
            p.category_id = c.category_id and
            u.user_id = o.user_id
          <if test="search != null and search != ''">
            and(
            o.user_id = #{search} or
            p.product_name like concat('%', #{search}, '%') or
            c.category_name like concat('%', #{search}, '%')
            )
          </if>
        order by o.order_time desc
    </select>

    <select id="getCategorySales" resultType="java.util.HashMap">
        select
            c.category_id, c.category_name, sum(p.product_sales) as 'total'
        from category c, product p
        where c.category_id = p.category_id
        group by c.category_id
    </select>

</mapper>














